# CLDR Ant workflow.
#
# TODO:
# - [ ] parameterize unittest so you can pass specific options (i.e. exhaustive) on manual run
# - [ ] parameterize datacheck so you can pass specific options (i.e. -z) on manual run

# Docs: https://docs.github.com/en/actions/language-and-framework-guides/building-and-testing-java-with-ant

name: cldr-ant

# Triggered on push to master,
# or PR against master.
on:
  push:
    branches: [ master ]
  pull_request:
    branches: '*'

jobs:
  build:
    # build everything
    runs-on: ubuntu-latest
    steps:
    # Setup
    - uses: actions/checkout@v2
      with:
        lfs: true # important!
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    # Cache for Tomcat tarball (load on cache hit, else store at end of job)
    - name: Cache for Tomcat tarball
      id: cache-tomcat
      uses: actions/cache@v2
      with:
        path: tomcat-tarball
        key: ${{ runner.os }}-tomcat-tarball
    - name: Download Tomcat # only on cache miss
      if: steps.cache-tomcat.outputs.cache-hit != 'true'
      run: 'mkdir -p ./tomcat-tarball && cd ./tomcat-tarball && wget -O - "https://www.apache.org/dyn/mirrors/mirrors.cgi?action=download&filename=tomcat/tomcat-8/v8.5.57/bin/apache-tomcat-8.5.57.tar.gz" | tar xfpz - ; cd .. '
    - name: Alias Tomcat directory
      run: ln -svf tomcat-tarball/apache-tomcat-* tomcat
    # CLDR Tools
    - name: Build tools/java
      run: ant -noinput all -f tools/java/build.xml && ant jar -f tools/java/build.xml
    - name: Upload cldr.jar
      uses: actions/upload-artifact@v2
      with:
        name: cldr-tools
        path: tools/java/cldr.jar
    # Now, SurveyTool
    - name: Build tools/cldr-apps
      run: ant -noinput -DCLDR_TOOLS=$(pwd)/tools/java -DCATALINA_HOME=$(pwd)/tomcat -f tools/cldr-apps/build.xml war
    - name: Upload cldr-apps.war
      uses: actions/upload-artifact@v2
      with:
        name: cldr-apps
        path: tools/cldr-apps/cldr-apps.war
  surveytest:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        lfs: true # important!
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Download cldr.jar
      uses: actions/download-artifact@v2
      with:
        name: cldr-tools
        path: tools/java/dist/for-build
    - name: Download cldr-apps.war
      uses: actions/download-artifact@v2
      with:
        name: cldr-apps
        path: tools/java/dist/for-build
    # Cache for Tomcat tarball (load on cache hit, else store at end of job)
    - name: Cache for Tomcat tarball
      id: cache-tomcat
      uses: actions/cache@v2
      with:
        path: tomcat-tarball
        key: ${{ runner.os }}-tomcat-tarball
    - name: Download Tomcat # only on cache miss
      if: steps.cache-tomcat.outputs.cache-hit != 'true'
      run: 'mkdir -p ./tomcat-tarball && cd ./tomcat-tarball && wget -O - "https://www.apache.org/dyn/mirrors/mirrors.cgi?action=download&filename=tomcat/tomcat-8/v8.5.57/bin/apache-tomcat-8.5.57.tar.gz" | tar xfpz - ; cd .. '
    - name: Alias Tomcat directory
      run: ln -svf tomcat-tarball/apache-tomcat-* tomcat
    - name: Survey Tool Check
      run: ant -noinput -DCLDR_TOOLS=$(pwd)/tools/java -DCATALINA_HOME=$(pwd)/tomcat -f tools/cldr-apps/build.xml check
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        lfs: true # important!
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Download cldr.jar
      uses: actions/download-artifact@v2
      with:
        name: cldr-tools
        path: tools/java/dist/for-build
    - name: Debug
      run: find tools/java/dist/for-build -ls
    - name: Build tools/cldr-unittest
      run: ant -noinput -f tools/cldr-unittest/build.xml -DCLDR_DIR=$(pwd) tests
    # Now run tests
    - name: CLDR Unit Test
      run: ant -noinput unittest -f tools/cldr-unittest/build.xml -DCLDR_DIR=$(pwd)
    - name: CLDR Data Check
      run: ant -noinput datacheck -f tools/cldr-unittest/build.xml -DCLDR_DIR=$(pwd)
  deploy:
    needs:
      - build
      - surveytest
      - test
    runs-on: ubuntu-latest
    steps:
    - name: Download cldr-apps.war
      uses: actions/download-artifact@v2
      with:
        name: cldr-apps
    - name: Deploy to cldr-ref (experimental)
      # Only on push.
      if: ${{ github.event_name == 'push' }}
      shell: bash
      env:
        # the RSA key for connecting
        RSA_KEY_SURVEYTOOL: ${{ secrets.RSA_KEY_SURVEYTOOL }}
        # the SSH port
        CLDRREF_PORT: ${{ secrets.CLDRREF_PORT }}
        # the SSH host
        CLDRREF_HOST: ${{ secrets.CLDRREF_HOST }}
        # the ~/.ssh/known_hosts line mentioning CLDRREF_HOST
        CLDRREF_KNOWNHOSTS: ${{ secrets.CLDRREF_KNOWNHOSTS }}
      run: |
        echo "${RSA_KEY_SURVEYTOOL}" > .key && chmod go= .key
        echo "${CLDRREF_KNOWNHOSTS}" > .knownhosts && chmod go= .knownhosts
        ssh -C -o UserKnownHostsFile=.knownhosts -i .key -p ${CLDRREF_PORT} surveytool@${CLDRREF_HOST} sh deploy.sh < cldr-apps.war ${GITHUB_SHA}

# #contents of deploy.sh referenced above:
# #!/bin/sh
# GITHUB_SHA=$1
# export TPASS=____
# export TUSER=____
# curl -u ${TUSER}:${TPASS} 'http://localhost:8080/manager/text/undeploy?path=/cldr-apps'
# rm -fv cldr-apps.war .deploystatus
# dd bs=1024000 status=progress of=cldr-apps.war
# echo ; echo -n file count
# (unzip -l cldr-apps.war | wc -l ) || exit 1
# (cd  /var/lib/tomcat8/cldr/cldr-trunk/ && git fetch && git clean -f -d ; git checkout  ${GITHUB_SHA} )
# curl -u ${TUSER}:${TPASS} 'http://localhost:8080/manager/text/deploy?path=/cldr-apps&tag=cldr-apps&update=true' -T ./cldr-apps.war | tee .deploystatus
# exec grep -q '^OK -' .deploystatus ## Check for response from Tomcat